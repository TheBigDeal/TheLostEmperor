#set_variable = { oil_price = resource_exported@oil } # $1
refresh_economy2 = {
	#Set/Reset Main Variables
	######################################################
	set_variable = { daily_gain = 0 }
	set_variable = { daily_loss = 0 }
	set_variable = { daily_income = 0}

	#Population Taxes
	######################################################
	set_variable = { upper_class_population = max_manpower_k }
	set_variable = { upper_class_population = max_manpower_k }
	set_variable = { upper_class_percent = 0.05 }
	set_variable = { middle_class_population = max_manpower_k }
	set_variable = { middle_class_percent = 0.75 }
	set_variable = { lower_class_population = max_manpower_k }
	set_variable = { lower_class_percent = 0.20 }

	multiply_variable = { upper_class_population = upper_class_percent }
	multiply_variable = { middle_class_population = middle_class_percent }
	multiply_variable = { lower_class_population = lower_class_percent }

	set_variable = { upper_class_tax_rate = economy_upper_class_taxes_dm }
	divide_variable = { upper_class_tax_rate = 100 }
	set_variable = { middle_class_tax_rate = economy_middle_class_taxes_dm }
	divide_variable = { middle_class_tax_rate = 100 }
	set_variable = { lower_class_tax_rate = economy_lower_class_taxes_dm }
	divide_variable = { lower_class_tax_rate = 100 }


	set_variable = { upper_class_taxes = upper_class_population }
	multiply_variable = { upper_class_taxes = upper_class_tax_rate }
	divide_variable = {  upper_class_taxes = 10 }
	round_variable = upper_class_taxes

	set_variable = { middle_class_taxes = middle_class_population }
	multiply_variable = { middle_class_taxes = middle_class_tax_rate }
	divide_variable = {  middle_class_taxes = 100 }
	round_variable = middle_class_taxes

	set_variable = { lower_class_taxes = lower_class_population }
	multiply_variable = { lower_class_taxes = lower_class_tax_rate }
	divide_variable = {  lower_class_taxes = 100 }
	round_variable = lower_class_taxes

	set_variable = { total_population_tax_gain = upper_class_taxes }
	add_to_variable = { total_population_tax_gain = middle_class_taxes }
	add_to_variable = { total_population_tax_gain = lower_class_taxes }

	add_to_variable = { daily_gain = total_population_tax_gain }

	#Industry Taxes
	######################################################
	set_variable = { industry_tax = num_of_civilian_factories }
	if = {
		limit = { has_idea = tax_capital_gains_none }
		set_variable = { capital_gains_tax_rate = 0 }
	}
	else_if = {
		limit = { has_idea = tax_capital_gains_very_low }
		set_variable = { capital_gains_tax_rate = 0.50 }
	}
	else_if = {
		limit = { has_idea = tax_capital_gains_low }
		set_variable = { capital_gains_tax_rate = 0.75 }
	}
	else_if = {
		limit = { has_idea = tax_capital_gains_medium }
		set_variable = { capital_gains_tax_rate = 1 }
	}
	else_if = {
		limit = { has_idea = tax_capital_gains_high }
		set_variable = { capital_gains_tax_rate = 1.25 }
	}
	else_if = {
		limit = { has_idea = tax_capital_gains_very_high }
		set_variable = { capital_gains_tax_rate = 1.50 }
	}
	else_if = {
		limit = { has_idea = tax_capital_gains_excessive }
		set_variable = { capital_gains_tax_rate = 2 }
	}
	multiply_variable = { industry_tax = capital_gains_tax_rate }
	multiply_variable = { industry_tax = 2 }
	round_variable = industry_tax
	add_to_variable = { daily_gain = industry_tax}

	#Resource Income
	######################################################
	set_variable = { food_resource_income = resource_exported@food }
	divide_variable = { food_resource_income = 100 } #0.01 Per Food
	set_variable = { coal_resource_income = resource_exported@coal }
	divide_variable = { coal_resource_income = 25 } #0.004 Per Coal
	set_variable = { textiles_resource_income = resource_exported@textiles }
	set_variable = { wood_resource_income = resource_exported@wood }
	divide_variable = { wood_resource_income = 25 } #0.004 Per Wood
	set_variable = { cotton_resource_income = resource_exported@cotton }
	set_variable = { tobacco_resource_income = resource_exported@tobacco }
	set_variable = { oil_resource_income = resource_exported@oil }
	set_variable = { aluminium_resource_income = resource_exported@aluminium }
	set_variable = { rubber_resource_income = resource_exported@rubber }
	set_variable = { flint_resource_income = resource_exported@flint }
	set_variable = { steel_resource_income = resource_exported@steel }
	divide_variable = { steel_resource_income = 10 } #0.10 Per Steel
	set_variable = { chromium_resource_income = resource_exported@chromium }
	divide_variable = { chromium_resource_income = 10 } #0.10 Per Chromium

	set_variable = { total_resource_income = food_resource_income }
	add_to_variable = { total_resource_income = coal_resource_income }
	add_to_variable = { total_resource_income = textiles_resource_income }
	add_to_variable = { total_resource_income = wood_resource_income }
	add_to_variable = { total_resource_income = cotton_resource_income }
	add_to_variable = { total_resource_income = tobacco_resource_income }
	add_to_variable = { total_resource_income = oil_resource_income }
	add_to_variable = { total_resource_income = aluminium_resource_income }
	add_to_variable = { total_resource_income = rubber_resource_income }
	add_to_variable = { total_resource_income = flint_resource_income }
	add_to_variable = { total_resource_income = steel_resource_income }
	add_to_variable = { total_resource_income = chromium_resource_income }
	#Adding to Treasury
	######################################################
	# Variables are stored as 32 bit integers, cannot be larger than 2,147,483,647 or smaller than -2,147,483,647
	add_to_variable = { daily_income = daily_gain}
	subtract_from_variable = {daily_income = daily_loss }
}

recieve_daily_money = {
	add_to_variable = { treasury = daily_income }
	clamp_variable = {
		var = treasury
		min = -2000000
		max = 2000000
	}
}

reload_ideas = {
	### Political Parties - Only Underground
	#############################################################
	if = {
		limit = { has_idea = law_1_only_underground }
		set_variable = { law_1_only_underground_var = -140 }
	}
	else_if  = {
		limit = { NOT = { has_idea = law_1_only_underground } }
		set_variable = { law_1_only_underground_var = 0 }
	}
	### Political Parties - Harrassment
	#############################################################
	if = {
		limit = { has_idea = law_1_harrassment }
		set_variable = { law_1_harrassment_var = -100 }
	}
	else_if  = {
		limit = { NOT = { has_idea = law_1_harrassment } }
		set_variable = { law_1_harrassment_var = 0 }
	}
	### Political Parties - Gerrymandering
	#############################################################
	if = {
		limit = { has_idea = law_1_gerrymandering }
		set_variable = { law_1_gerrymandering_var = -60 }
	}
	else_if  = {
		limit = { NOT = { has_idea = law_1_gerrymandering } }
		set_variable = { law_1_gerrymandering_var = 0 }
	}
	### Political Parties - Open Ballots
	#############################################################
	if = {
		limit = { has_idea = law_1_open_ballots }
		set_variable = { law_1_open_ballots_var = -40 }
	}
	else_if  = {
		limit = { NOT = { has_idea = law_1_open_ballots } }
		set_variable = { law_1_open_ballots_var = 0 }
	}
	### Political Parties - Open Ballots
	#############################################################
	if = {
		limit = { has_idea = law_1_confidential_ballots }
		set_variable = { law_1_confidential_ballots_var = -20 }
	}
	else_if  = {
		limit = { NOT = { has_idea = law_1_confidential_ballots } }
		set_variable = { law_1_confidential_ballots_var = 0 }
	}
}
set_religions = {
	if = {
		every_country = {
			limit = { has_idea = le_religion_catholicism }
			set_variable = { state_catholicism = 1 }
		}
	}
}
HRE_recalc_congress_icon_frames = {
	set_temp_variable = { house_temp = global.representatives_support }
	divide_temp_variable = { house_temp = global.representatives_total }
	multiply_temp_variable = { house_temp = 80 }
	if = {
		limit = { check_variable = { house_temp > 0 } }
		clamp_temp_variable = {
			var = house_temp
			min = 1
			max = 80
		}
	}
	else = {
		set_temp_variable = { house_temp = 1 }
	}
	set_variable = { current_house_icon_frame = house_temp }
}
load_hansa_leader_array = {
	clear_array = global.hansa_leader_array
	add_to_array = { global.hansa_leader_array = LUB }
}
load_hansa_member_array = {
	clear_array = global.hansa_member_array
	set_variable = { hansa_members = 0 }
	every_country = {
		limit = {
			has_idea = hansa_member
		}
		add_to_array = { global.hansa_member_array = this.id }
	}
	for_each_loop = {
		array = global.hansa_member_array
		add_to_variable = { hansa_members = 1 }
	}
}
load_hansa_colony_array = {
	clear_array = global.hansa_colony_array
	set_variable = { hansa_colonies = 0 }
	every_country = {
		limit = {
			has_idea = hansa_colony
		}
		add_to_array = { global.hansa_colony_array = this.id }
	}
	for_each_loop = {
		array = global.hansa_colony_array
		add_to_variable = { hansa_colonies = 1 }
	}
}

HRE_load_emperor_array = {
	clear_array = global.emperor_array
	add_to_array = { global.emperor_array = AUS }
}
HRE_load_elector_array = {
	clear_array = global.elector_array
	set_variable = { HRE_num_electors = 0 }
	every_country = {
		limit = {
			has_idea = HRE_elector
		}
		add_to_array = { global.elector_array = this.id }
	}
	for_each_loop = {
		array = global.elector_array
		add_to_variable = { HRE_num_electors = 1 }
	}
}
HRE_load_city_array = {
	clear_array = global.city_array
	set_variable = { HRE_num_cities = 0 }
	every_country = {
		limit = {
			has_idea = HRE_city
		}
		add_to_array = { global.city_array = this.id }
	}
	for_each_loop = {
		array = global.city_array
		add_to_variable = { HRE_num_cities = 1 }
	}
}
HRE_load_country_array = {
	clear_array = global.hre_array
	set_variable = { HRE_num_members = 0 }
	every_country = {
		limit = {
			has_idea = HRE_member
		}
		add_to_array = { global.hre_array = this.id }
	}
	for_each_loop = {
		array = global.hre_array
		add_to_variable = { HRE_num_members = 1 }
	}
}
get_industrial_score = {
	set_variable = { industrial_score = 0 }
	set_variable = { temp_pop = max_manpower_k }
	divide_variable = {
		var = temp_pop
		value = 5000
	}
	add_to_variable = {
		var = industrial_score
		value = temp_pop
	}
	add_to_variable = {
		var = industrial_score
		value = num_of_civilian_factories
	}
}
get_military_score = {
	set_variable = { military_score = 0 }
	set_variable = { temp_bat = num_battalions }
	divide_variable = {
		var = temp_bat
		value = 15
	}
	add_to_variable = {
		var = military_score
		value = temp_bat
	}
	add_to_variable = {
		var = military_score
		value = num_of_military_factories
	}
	add_to_variable = {
		var = military_score
		value = num_of_naval_factories
	}
}
set_economic_pp_costs = {
	set_variable = { upper_economic_pp_cost = 300 }
	subtract_from_variable = { upper_economic_pp_cost_neg = upper_economic_pp_cost } # Negitive of variable
	set_variable = { middle_economic_pp_cost = 300 }
	subtract_from_variable = { middle_economic_pp_cost_neg = middle_economic_pp_cost }
	set_variable = { lower_economic_pp_cost = 300 }
	subtract_from_variable = { lower_economic_pp_cost_neg = lower_economic_pp_cost }
	set_variable = { capital_gains_economic_pp_cost = 300 }
	subtract_from_variable = { capital_gains_economic_pp_cost_neg = capital_gains_economic_pp_cost }
	set_variable = { tariffs_economic_pp_cost = 300 }
	subtract_from_variable = { tariffs_economic_pp_cost_neg = tariffs_economic_pp_cost }
	set_variable = { army_economic_pp_cost = 300 }
	subtract_from_variable = { army_economic_pp_cost_neg = army_economic_pp_cost }
	set_variable = { education_economic_pp_cost = 300 }
	subtract_from_variable = { education_economic_pp_cost_neg = education_economic_pp_cost }
	set_variable = { administration__economic_pp_cost = 300 }
	subtract_from_variable = { administration__economic_pp_cost_neg = administration__economic_pp_cost }
	set_variable = { social_economic_pp_cost = 300 }
	subtract_from_variable = { social_economic_pp_cost_neg = social_economic_pp_cost }
	set_variable = { covert_economic_pp_cost = 300 }
	subtract_from_variable = { covert_economic_pp_cost_neg = covert_economic_pp_cost }
}

load_great_powers_array = {
	every_country = {
		clear_array = global.powers_array
		clear_array = global.sorted_powers_array
		clear_array = global.score_array

		clear_array = global.prestige_score_array
		clear_array = global.military_score_array
		clear_array = global.industrial_score_array

		clear_array = global.score_array_position
		clear_array = global.score_tag_array

		set_variable = { total_score = 0 }
		#set_variable = { prestige_score = 0 }
		#set_variable = { military_score = 0 }
		#set_variable = { industrial_score = 0 }

		get_military_score = yes
		get_industrial_score = yes

		if = { #Add Puppet score to overload
			limit = {
				OR = {
					is_puppet = yes
					is_subject = yes
					NOT = { check_variable = { prestige_score = puppet_prestige_counter } }
				}
			}
			OVERLORD = {
				add_to_variable = { var = prestige_score value = PREV.prestige_score }
				add_to_variable = { var = total_score value = PREV.prestige_score }
				set_variable = { puppet_prestige_counter = PREV.prestige_score }
			}
		}
		else = { #Unless not a puppet
			add_to_variable = { var = total_score value = prestige_score }
		}
		if = {
			limit = {
				OR = {
					is_puppet = yes
					is_subject = yes
					NOT = { check_variable = { prestige_score = puppet_prestige_counter } }
				}
			}
			OVERLORD = {
				add_to_variable = { var = military_score value = PREV.military_score }
				add_to_variable = { var = total_score value = PREV.military_score }
				set_variable = { puppet_military_counter = PREV.military_score }
			}
		}
		else = {
			add_to_variable = { var = total_score value = military_score }
		}
		if = {
			limit = {
				OR = {
					is_puppet = yes
					is_subject = yes
					NOT = { check_variable = { prestige_score = puppet_prestige_counter } }
				}
			}
			OVERLORD = {
				add_to_variable = { var = industrial_score value = PREV.industrial_score }
				add_to_variable = { var = total_score value = PREV.industrial_score }
				set_variable = { puppet_industrial_counter = PREV.industrial_score }
			}
		}
		else = {
			add_to_variable = { var = total_score value = industrial_score }
		}
	}
	if = {
		limit = {
			OR = {
				is_puppet = no
				is_subject = no
			}
		}
		every_country = {
			round_variable = total_score
			round_variable = prestige_score
			round_variable = military_score
			round_variable = industrial_score
			add_to_array = { global.score_array = total_score }

			add_to_array = { global.prestige_score_array = prestige_score }
			add_to_array = { global.military_score_array = military_score }
			add_to_array = { global.industrial_score_array = industrial_score }

			add_to_array = { global.score_tag_array = THIS.id }
			add_to_array = { global.p_score_tag_array = THIS.id }
			add_to_array = { global.m_score_tag_array = THIS.id }
			add_to_array = { global.i_score_tag_array = THIS.id }

			set_temp_variable = { length_temp = global.score_array^num }
		}

		for_loop_effect = {
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b
			find_highest_in_array = { array = global.score_array value = score_array_highest_value index = score_array_highest_index }
			find_highest_in_array = { array = global.prestige_score_array value = prestige_score_array_highest_value index = prestige_score_array_highest_index }
			find_highest_in_array = { array = global.military_score_array value = military_score_array_highest_value index = military_score_array_highest_index }
			find_highest_in_array = { array = global.industrial_score_array value = industrial_score_array_highest_value index = industrial_score_array_highest_index }

			remove_from_array = { array = global.score_array index = score_array_highest_index }
			remove_from_array = { array = global.prestige_score_array index = prestige_score_array_highest_index }
			remove_from_array = { array = global.military_score_array index = military_score_array_highest_index }
			remove_from_array = { array = global.industrial_score_array index = industrial_score_array_highest_index }

			add_to_temp_array = { array = global.score_array_temp value = score_array_highest_value }
			add_to_temp_array = { array = global.p_score_array_temp value = prestige_score_array_highest_value }
			add_to_temp_array = { array = global.m_score_array_temp value = military_score_array_highest_value }
			add_to_temp_array = { array = global.i_score_array_temp value = industrial_score_array_highest_value }

			set_temp_variable = { tag_temp = global.score_tag_array^score_array_highest_index }
			set_temp_variable = { p_tag_temp = global.p_score_tag_array^prestige_score_array_highest_index }
			set_temp_variable = { m_tag_temp = global.m_score_tag_array^military_score_array_highest_index }
			set_temp_variable = { i_tag_temp = global.i_score_tag_array^industrial_score_array_highest_index }

			remove_from_array = { array = global.score_tag_array index = score_array_highest_index }
			remove_from_array = { array = global.p_score_tag_array index = prestige_score_array_highest_index }
			remove_from_array = { array = global.m_score_tag_array index = military_score_array_highest_index }
			remove_from_array = { array = global.i_score_tag_array index = industrial_score_array_highest_index }

			add_to_temp_array = { array = global.score_tag_array_temp value = tag_temp }
			add_to_temp_array = { array = global.p_score_tag_array_temp value = p_tag_temp}
			add_to_temp_array = { array = global.m_score_tag_array_temp value = m_tag_temp }
			add_to_temp_array = { array = global.i_score_tag_array_temp value = i_tag_temp }
		}
		for_loop_effect = {
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b
			add_to_array = { array = global.score_array value = global.score_array_temp^v }
			add_to_array = { array = global.score_tag_array value = global.score_tag_array_temp^v }

			add_to_array = { array = global.prestige_score_array value = global.p_score_array_temp^v }
			add_to_array = { array = global.p_score_tag_array value = global.p_score_tag_array_temp^v }

			add_to_array = { array = global.military_score_array value = global.m_score_array_temp^v  }
			add_to_array = { array = global.m_score_tag_array value = global.m_score_tag_array_temp^v }

			add_to_array = { array = global.industrial_score_array value = global.i_score_array_temp^v }
			add_to_array = { array = global.i_score_tag_array value = global.i_score_tag_array_temp^v }
		}
		for_loop_effect = { #Add Numbers to array based on how many tags exist
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b

			add_to_array = { array = global.score_array_position value = v }
			add_to_variable = { global.score_array_position^v = 1 }

			add_to_array = { array = global.p_score_array_position  value = v }
			add_to_variable = { global.p_score_array_position^v = 1 }

			add_to_array = { array = global.m_score_array_position value = v }
			add_to_variable = { global.m_score_array_position^v = 1 }

			add_to_array = { array = global.i_score_array_position value = v }
			add_to_variable = { global.i_score_array_position^v = 1 }
		}

		every_country = { #Get Position in list
			for_loop_effect = {
				start = 0
				end = length_temp
				add = 1
				value = v
				break = b

				if = {
					limit = { check_variable = { global.score_tag_array^v = THIS } }
					set_variable = { score_array_position_var = v }
					set_variable = { b = 0 }
				}
				if = {
					limit = { check_variable = { global.score_tag_array^v = THIS } }
					set_variable = { p_score_array_position_var = v }
					set_variable = { b = 0 }
				}
				if = {
					limit = { check_variable = { global.score_tag_array^v = THIS } }
					set_variable = { m_score_array_position_var = v }
					set_variable = { b = 0 }
				}
				if = {
					limit = { check_variable = { global.score_tag_array^v = THIS } }
					set_variable = { i_score_array_position_var = v }
					set_variable = { b = 0 }
				}
			}
			set_variable = { score_array_position_var_pop = score_array_position_var }
			add_to_variable = { score_array_position_var = 1 }
			set_variable = { p_score_array_position_var_pop = p_score_array_position_var }
			add_to_variable = { p_score_array_position_var = 1 }
			set_variable = { i_score_array_position_var_pop = i_score_array_position_var }
			add_to_variable = { i_score_array_position_var = 1 }
			set_variable = { m_score_array_position_var_pop = m_score_array_position_var }
			add_to_variable = { m_score_array_position_var = 1 }
		}

		every_country = {
			for_loop_effect = {
				start = 0
				end = length_temp
				add = 1
				value = v
				break = b

				if = {
					limit = { check_variable = { global.score_tag_array^v = THIS } }
					set_variable = { global.prestige_score_array^v = prestige_score }
					set_variable = { global.military_score_array^v = military_score }
					set_variable = { global.industrial_score_array^v = industrial_score }
					set_variable = { b = 0 }
				}
			}
		}
	}
}

get_population_number = {
	set_variable = { country_population = max_manpower_k }
	if = {
		limit = {
			check_variable = {
				var = country_population
				value = 1000
				compare = greater_than_or_equals
			}
		}
		set_variable = { is_over_million_pop = 1 }
		divide_variable = {
			var = country_population
			value = 1000
		}
	}
}

get_force_limit = {
	set_variable = { force_limit = max_manpower_k }
	divide_variable = { force_limit = 450 }
	round_variable = force_limit

	set_variable = { force_limit_6 = force_limit }
	add_to_variable = { force_limit_6 = 6 } #Minor Exceeding

	set_variable = { force_limit_12 = force_limit }
	add_to_variable = { force_limit_12 = 12 } #Exceeding

	set_variable = { force_limit_18 = force_limit }
	add_to_variable = { force_limit_18 = 18 } #Major Exceeding
}
get_starting_food = {
	if = {
		limit = { check_variable = { global.food_allowed_to_run = 1 }}
		set_variable = { starting_food = max_manpower_k }
		divide_variable = {starting_food = 400}
		round_variable = starting_food #Food every day needed
		multiply_variable = { starting_food = 2 } #7 Days of Food to Start
		add_to_variable = { current_food = starting_food }
		set_variable = { days_in_famine = 0 }
		set_variable = { famine_value = 0 }
	}
}
get_food_needs = {
	set_variable = { food_needed = max_manpower_k }
	divide_variable = { food_needed = 400 }
	round_variable = food_needed
	#set_variable = { food_needed_dm = food_needed }
	#multiply_variable = { food_needed_dm = -1 } #Make it negative
	if = {
		limit = { check_variable = { food_needed < resource_produced@food } } #If you have more food than what is needed
		set_variable = { food_daily = resource@food } #Surplus food is total amount of food minus how much food you consume
		subtract_from_variable = { food_daily = food_needed } # ^^^
		add_to_variable = { current_food = food_daily } #Add the surplus to the stockpile
		set_variable = { days_in_famine = 0 } #Reseting famine counter if no longer in famine
		set_variable = { famine_value = 0 } #Reseting famine value if no longer in famine
	}
	if = {
		limit = { check_variable = { food_needed > resource@food } } #If you have less food than what is needed
		set_variable = { food_daily = food_needed } #Subtract needed food from stockpile
		multiply_variable = { food_daily = -1 } #Make it negative
		add_to_variable = { food_daily = resource@food } #Add the surplus to the stockpile
		add_to_variable = { current_food = food_daily } # ^^^
		if = { limit = { check_variable = { current_food < 1 }} #In Famine
			add_to_variable = { days_in_famine = 1 }
			if = {
				limit = {check_variable = { famine_value > -0.25 }}
				subtract_from_variable = { famine_value = 0.001 }
			}
		}
	}
	clamp_variable = { var = current_food min = 0 max = 2000000} #Cannot have negative food, either have food or dont have food
}
find_total_communist_pop = {
	every_country = {
	  limit = {
		  	OR = {
			  has_idea = le_religion_sunni
			  has_idea = le_religion_shia
			  has_idea = le_religion_ibadi
	  		}
		}
		set_variable = { total_communist_pop = party_popularity@mutualism }
		add_to_variable = { total_communist_pop = party_popularity@proletarianism }
	 	add_to_variable = { total_communist_pop = party_popularity@collectivism}
	}
}

MJG_spawn_effect = {
	MJG = {
		load_oob = "generic_arab"
	}
	random_owned_controlled_state = {
		is_capital = no
		MJG = {
			transfer_state = PREV
		}
		create_unit = {
			division = "name = \"Alfurqa Aljihadiyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = MJG
			##
		}
		create_unit = {
			division = "name = \"Alfurqa Aljihadiyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = MJG
			##
		}
		create_unit = {
			division = "name = \"Alfurqa Aljihadiyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = MJG
			##
		}
	}
	random_owned_controlled_state = {
		is_capital = no
		MJG = {
			transfer_state = PREV
		}
		create_unit = {
			division = "name = \"Alfurqa Aljihadiyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = MJG
			##
		}
		create_unit = {
			division = "name = \"Alfurqa Aljihadiyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = MJG
			##
		}
		create_unit = {
			division = "name = \"Alfurqa Aljihadiyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = MJG
			##
		}
	}
	MJG = {
		declare_war_on = {
			target = FROM
			type = annex_everything
		}
	}
}

JTH_spawn_effect = {
	JTH = {
		load_oob = "generic_arab"
	}
	random_owned_controlled_state = {
		is_capital = no
		JTH = {
			transfer_state = PREV
		}
		create_unit = {
			division = "name = \"Alfurqa Attahririyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = JTH
			##
			count = 3
		}
	}
	random_owned_controlled_state = {
		is_capital = no
		JTH = {
			transfer_state = PREV
		}
		create_unit = {
			division = "name = \"Alfurqa Attahririyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = JTH
			##
			count = 3
		}
	}
	JTH = {
		declare_war_on = {
			target = FROM
			type = annex_everything
		}
	}
}

IKH_spawn_effect = {
	IKH = {
		load_oob = "generic_arab"
	}
	random_owned_controlled_state = {
		is_capital = no
		IKH = {
			transfer_state = PREV
		}
		create_unit = {
			division = "name = \"Alfurqa Aljihadiyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = IKH
			##
			count = 3
		}
	}
	random_owned_controlled_state = {
		is_capital = no
		IKH = {
			transfer_state = PREV
		}
		create_unit = {
			division = "name = \"Alfurqa Aljihadiyya\" division_template = \"Alfurqat Almasha\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
			owner = IKH
			##
			count = 3
		}
	}
	IKH = {
		declare_war_on = {
			target = FROM
			type = annex_everything
		}
	}
}
